"""Main Telegram bot module."""

import asyncio
import json
import os
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

from storage.database import Database

load_dotenv()

# Configuration
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
DB_PATH = os.getenv("DB_PATH", "data/db.sqlite3")

# Initialize bot and database
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
db = Database(DB_PATH)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Handle /start command."""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # Add user as admin
    await db.add_admin(user_id)
    
    await message.answer(
        "ü§ñ **Kwork Auto Offer Bot**\n\n"
        "–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ Kwork –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤.\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "/status - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Kwork\n"
        "/filters - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
        "/templates - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Handle /help command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    help_text = """
üìã **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:**

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Kwork
/logout - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é

**–§–∏–ª—å—Ç—Ä—ã:**
/filters - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
/addfilter <json> - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
/delfilter <name> - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä

**–®–∞–±–ª–æ–Ω—ã:**
/templates - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
/settpl <name> <text> - —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω
/deltpl <name> - —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
/interval <sec> - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
/quiet <on|off> - –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
/blacklist - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
/setproxy <url> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
/captchamode <on|off> - —Ä–µ–∂–∏–º –∫–∞–ø—á–∏

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
/test - —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω

**–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞:**
```json
{
  "name": "design_ru",
  "keywords_any": ["–ª–æ–≥–æ—Ç–∏–ø", "–±—Ä–µ–Ω–¥–∏–Ω–≥"],
  "categories": ["–î–∏–∑–∞–π–Ω"],
  "budget_min": 1000,
  "budget_max": 50000
}
```
"""
    await message.answer(help_text)


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """Handle /status command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # Get basic stats
    filters = await db.get_filters()
    templates = await db.get_templates()
    
    status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

**–§–∏–ª—å—Ç—Ä—ã:** {len(filters)} –∞–∫—Ç–∏–≤–Ω—ã—Ö
**–®–∞–±–ª–æ–Ω—ã:** {len(templates)} —Å–æ–∑–¥–∞–Ω–æ
**–°–µ—Å—Å–∏—è:** {'‚úÖ' if await db.get_session('kwork_session') else '‚ùå'}

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if len(filters) > 0 else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
- –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω: {'–ù–µ–¥–∞–≤–Ω–æ' if len(filters) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {await db.get_setting('scan_interval') or '45 —Å–µ–∫'}
- –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: {await db.get_setting('quiet_mode') or '–í—ã–∫–ª—é—á–µ–Ω'}
"""
    
    await message.answer(status_text)


@dp.message(Command("filters"))
async def cmd_filters(message: types.Message):
    """Handle /filters command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    filters = await db.get_filters()
    
    if not filters:
        await message.answer("üìù –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addfilter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    filters_text = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**\n\n"
    for i, filter_data in enumerate(filters, 1):
        filters_text += f"{i}. **{filter_data['name']}**\n"
        if 'keywords_any' in filter_data:
            filters_text += f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(filter_data['keywords_any'])}\n"
        if 'budget_min' in filter_data and 'budget_max' in filter_data:
            filters_text += f"   –ë—é–¥–∂–µ—Ç: {filter_data['budget_min']}-{filter_data['budget_max']} ‚ÇΩ\n"
        filters_text += "\n"
    
    await message.answer(filters_text)


@dp.message(Command("addfilter"))
async def cmd_addfilter(message: types.Message):
    """Handle /addfilter command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # Extract JSON from command
    text = message.text.replace("/addfilter", "").strip()
    
    if not text:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ JSON —Ñ–∏–ª—å—Ç—Ä–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/addfilter {\"name\": \"design\", \"keywords_any\": [\"–ª–æ–≥–æ—Ç–∏–ø\"]}"
        )
        return
    
    try:
        filter_data = json.loads(text)
        if "name" not in filter_data:
            await message.answer("‚ùå –§–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'name'")
            return
        
        await db.save_filter(filter_data["name"], filter_data)
        await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_data['name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except json.JSONDecodeError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")


@dp.message(Command("delfilter"))
async def cmd_delfilter(message: types.Message):
    """Handle /delfilter command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    filter_name = message.text.replace("/delfilter", "").strip()
    
    if not filter_name:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    await db.delete_filter(filter_name)
    await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_name}' —É–¥–∞–ª–µ–Ω!")


@dp.message(Command("templates"))
async def cmd_templates(message: types.Message):
    """Handle /templates command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    templates = await db.get_templates()
    
    if not templates:
        await message.answer("üìù –®–∞–±–ª–æ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settpl –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    templates_text = "üìã **–®–∞–±–ª–æ–Ω—ã –æ—Ç–∫–ª–∏–∫–æ–≤:**\n\n"
    for name, text in templates.items():
        preview = text[:100] + "..." if len(text) > 100 else text
        templates_text += f"**{name}:**\n{preview}\n\n"
    
    await message.answer(templates_text)


@dp.message(Command("settpl"))
async def cmd_settemplate(message: types.Message):
    """Handle /settpl command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # Extract template name and text
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/settpl tpl1 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–¥–∞—á—É..."
        )
        return
    
    template_name = parts[1]
    template_text = parts[2]
    
    await db.save_template(template_name, template_text)
    await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")


@dp.message(Command("deltpl"))
async def cmd_deltemplate(message: types.Message):
    """Handle /deltpl command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    template_name = message.text.replace("/deltpl", "").strip()
    
    if not template_name:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    await db.delete_template(template_name)
    await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É–¥–∞–ª–µ–Ω!")


@dp.message(Command("login"))
async def cmd_login(message: types.Message):
    """Handle /login command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    await message.answer(
        "üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Kwork**\n\n"
        "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/login_kwork <email> <password>\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ."
    )


@dp.message(Command("logout"))
async def cmd_logout(message: types.Message):
    """Handle /logout command."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    await db.delete_session("kwork_session")
    await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞!")


async def main():
    """Main function."""
    # Initialize database
    await db.init()
    
    # Add default admin if specified
    if ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            await db.add_admin(admin_id)
    
    print("ü§ñ Starting Kwork Auto Offer Bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
